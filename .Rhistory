devtools::test()
devtools::test()
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
library(casl)
lambda <- 0.5
svals <- svd(X)$d
library(casl)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X)+lambda, crossprod(X, y)+lambda)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X)+lambda, crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
lambda <- 0.3
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X)+lambda, crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
devtools::test()
library(lm)
install.packages(lm)
install.packages("lm")
library(lm)
lm.ridge
lm
lm.ridge
lm
library(MASS)
lm.ridge
library(MASS)
devtools::test()
devtools::build_vignettes()
library(RidgeRegression)
devtools::check(document=TRUE)
testthat::auto_test()
load_all()
library(devtools)
load_all()
load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document
devtools::document()
devtools::document()
devtools::load_all()
foreach
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load_all()
devtools::use_mit_license()
devtools::document()
load_all()
devtools::document()
devtools::document()
devtools::use_mit_license()
library(devtools)
devtools::use_mit_license(name=findname())
use_mit_license()
use_mit_license(name = find_name())
use_mit_license(name = 'Rose Hu')
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
devtools::document()
install.packages("tidyverse")
devtools::document()
devtools::document()
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
devtools::document()
load_all()
devtools::document()
devtools::document()
load_all()
devtools::document()
load_all()
a = [1 2 3]
a = [1, 2, 3]
a = list([1,2,3])
a = list(1,2,3)
a
clear a
a <- (1,2,3)
a <- c(2,3,4
)
a
colMeans(a)
a <- [[1,2,3],[0,2,5]]
a <- array(1:3, 2:4)
a
a
a = matrix(c(1,2,3,4,5,6),nrow=2,ncol=3)
a
colMeans(a)
colMeans(a(,-1))
colMeans(a[,-1])
drop(a)
rep(1/nrow(a),nrow(a))
rep(1/nrow(a),nrow(a)) %*% a^2
b <- rep(1/nrow(a),nrow(a)) %*% a^2
drop(b)
array(1:12, dim = c(1,3,1,1,2,1,2))
c <- array(1:12, dim = c(1,3,1,1,2,1,2))
c
drop(c)
b
sqrt(b)
x<-1:5
y<-10:18
x
y
cbind(x,y)
x<-c(-9,12,92)
y<-c(-18,23,50)
cbind(x,y)
x
devtools::document()
install.packages("doParallel")
install.packages("rsample")
install.packages("casl")
install.packages("dplyr")
devtools::document()
devtools::install_github("statsmaths/casl")
devtools::install_github("statsmaths/casl")
devtools::document()
load_all()
library(devtools)
load_all()
install.packages("knitr")
devtools::document()
load_all()
ridge_regression(Sepal.Length~ ., iris)
load_all()
ridge_regression(Sepal.Length~ ., iris)
ridge_regression(Sepal.Length~ ., iris)
load_all()
ridge_regression(Sepal.Length~ ., iris)
load_all()
ridge_regression(Sepal.Length~ ., iris)
load_all()
ridge_regression(Sepal.Length~ ., iris)
library('rmarkdown')
install.packages("rmarkdown")
devtools::document()
load_all()
devtools::document()
devtools::document()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
fit_ridge
fit_lm <- lm.ridge(Sepal.Length  ~ ., iris,lambda=0.5)
library(MASS)
fit_lm <- lm.ridge(Sepal.Length  ~ ., iris,lambda=0.5)
fit_lm
fit_lm$coefficients
fit_lm
lm(Sepal.Length  ~ ., iris,lambda=0.5)
lm(Sepal.Length  ~ ., iris)
fit_lm
fit_lm
fit_ridge
expect_equivalent(fit_lm,fit_ridge)
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
expect_equivalent(fit_lm, fit_ridge,
tolerance = 1e-3)
fit_lm
fit_ridge
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
fit_lm <- lm.ridge(Sepal.Length  ~ ., iris,lambda=0.5)
expect_equivalent(fit_lm, fit_ridge, tolerance = 1e-3)
size(fit_lm)
length(fit_lm)
length(fit_ridge)
fit_lm
devtools::document()
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
fit_lm <- lm.ridge(Sepal.Length  ~ ., iris,lambda=0.5)
expect_equivalent(fit_lm, fit_ridge, tolerance = 1e-3)
length(fit_riddge)
length(fit_ridge)
length(fit_lm)
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
length(fit_ridge)
expect_equivalent(coef(fit_lm), coeffit_ridge, tolerance = 1e-3)
expect_equivalent(coef(fit_lm), fit_ridge, tolerance = 1e-3)
load_all()
devtools::document()
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
fit_lm <- lm.ridge(Sepal.Length  ~ ., iris,lambda=0.5)
expect_equivalent(coef(fit_lm), fit_ridge, tolerance = 1e-3)
expect_equivalent(fit_lm$coef, fit_ridge, tolerance = 1e-3)
expect_equivalent(coef(fit_lm), fit_ridge, tolerance = 1e-3)
fit_ridge
load_all()
fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda=0.5)
fit_ridge
names(fit_ridge)
devtools::document()
load_all()
qnorm(0.975)
library(devtools)
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
library(dplyr)
foreach
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load_all()
library(foreach)
%do%
library(dplyr)
library(foreach)
find(%do%)
find(%do%)
find(%do%)
library(foreach)
devtools::document()
load_all()
devtools::use_data(lm_patho)
devtools::use_data_raw(lm_patho)
devtools::use_data_raw()
library(devtools)
usethis::use_data_raw()
usethis::use_data()
devtools::document()
load_all()
library(rsample)
testing
devtools::document()
load_all()
devtools::build_vignettes()
devtools::document()
load_all()
devtools::document()
load_all()
testthat()
load_all()
devtools::load_all()
test_check("RidgeRegression")
testthat
testthat*()
testthat()
devtools::test()
devtools::document()
load_all()
devtools::document()
load_all()
knitr::opts_chunk$set(echo = TRUE)
library(casl)
library(casl)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
devtools
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
load_all()
library(RidgeRegression)
knitr::opts_chunk$set(echo = TRUE)
library(casl)
lambda <- 0.5
svals <- svd(X)$d
(max(svals)+lambda)/(min(svals)+lambda)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
library(casl)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
devtools::build_vignettes()
load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
load_all()
library(devtools)
load_all()
library(devtools)
devtools::document()
load_all()
devtools::document()
devtools::document()
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
form <- Sepal.Length~ .
form[2]
as.character(form[2])
data <- iris
folds = 10
lambdas=seq(0,1,0.05)
contrasts= NULL
i<- NULL
lambda <- NULL
`.`<- NULL
lower <- NULL
upper <- NULL
folds <- vfold_cv(data,v=folds)
registerDoParallel(1)
#calculates mse
casl_util_rmse <- function(y, y_hat){
mu <- mean((y-y_hat)^2)
mu
}
folds
folds$splits[[1]]
folds$splits[[1]][[as.character(form[2])]]
testing(NULL)
folds$splits[[1]]
folds$splits[[1]]
folds$splits[[1]][1]
folds$splits[[1]][2]
folds$splits[[1]]$(as.character(form[2]))
folds$splits[[1]]$as.character(form[2])
folds$splits[[1]]$(as.character(form[2]))
folds$splits[[1]]$[[as.character(form[2])]]
folds$splits[[1]][[as.character(form[2])]]
folds$splits[[1]][[as.character(form[1])]]
folds$splits[[1]][[as.character(form[3])]]
folds$splits[[1]]
folds$splits[[1]][[1]]
folds$splits[[1]][[2]]
folds$splits[[1]][[3]]
folds$splits[[1]][[4]]
folds$splits[[1]][[5]]
folds$splits[[1]][[3]]
folds$splits[[1]][[2]]
folds$splits[[1]][[1]]
folds$splits[[1]][[1][1]]
folds$splits[[1]][[1,1]]
folds$splits[[1]][1]
folds$splits[[1]][1][1]
folds$splits[[1]][1][1][1]
devtools::document()
load_all()
as.character(form[2])
testing(folds$splits[[i]])
testing(folds$splits[[1]])
(testing(folds$splits[[1]]))$"Sepal.Length"
(testing(folds$splits[[i]]))$as.character(form[2])
(testing(folds$splits[[i]]))
(testing(folds$splits[[1]]))
(testing(folds$splits[[1]]))$(as.character(form[2]))
$(as.character(form[2]))
(as.character(form[2]))
(testing(folds$splits[[1]]))$(as.character(form[2]))$"Sepal.Length"
(testing(folds$splits[[1]]))$"Sepal.Length"
(as.character(form[2]))
(testing(folds$splits[[1]]))
(testing(folds$splits[[1]]))$(as.character(form[2]))
(testing(folds$splits[[1]]))$(as.character(form[2])))
(testing(folds$splits[[1]]))$as.character(form[2])
(testing(folds$splits[[1]]))$"Sepal.Length"
string <- "Sepal.Length"
(testing(folds$splits[[1]]))$string
string
string[1]
(testing(folds$splits[[1]]))$string[1]
(testing(folds$splits[[1]]))$string[2]
(testing(folds$splits[[1]]))$string[3]
devtools::document()
load_all()
devtools::document()
load_all()
help("$")
as.character(form[2])
devtools::document()
load_all()
devtools::document()
load_all()
devtools::document()
load_all()
